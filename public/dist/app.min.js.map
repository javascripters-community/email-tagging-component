{"version":3,"sources":["app/app.ts","demo/demo.ts","templates.ts"],"names":["app","angular","module","config","tagsInputConfigProvider","setTextAutosizeThreshold","setDefaults","placeholder","minLength","type","enableEditingLastTag","addOnPaste","displayProperty","replaceSpacesWithDashes","allowLeftoverText","maxLength","debounceDelay","loadOnDownArrow","loadOnEmpty","tags","TagsController","directive","$http","TagsDirective","controller","this","controllerAs","bindToController","templateUrl","scope","validateEmail","email","re","test","restrict","link","errorMsg","loadTags","query","get","run","$templateCache","put"],"mappings":"CAEA,WACI,YACA,IAAIA,GAAMC,QAAQC,OAAO,OACrB,WACA,iBAKJF,GAAIG,OAAO,SAAUC,GACjBA,EAAwBC,yBAAyB,IACjDD,EACKE,YAAY,aACTC,YAAa,eACbC,UAAW,EACXC,KAAM,QACNC,sBAAsB,EACtBC,YAAY,EACZC,gBAAiB,cACjBC,yBAAwB,EACxBC,mBAAmB,EACnBC,UAAW,KAEdT,YAAY,gBACTU,cAAe,IACfC,iBAAiB,EACjBC,aAAa,QC3B7B,IAAUlB,MAAV,SAAUA,GAAI,GAAAmB,IAAA,SAAAA,GACV,YA0BA,IAAAC,GAAA,WACI,QAAAA,MAGJ,MAAAA,KAJaD,GAAAC,eAAcA,EAQ3BnB,QACKC,OAAO,YAAa,gBACpBmB,UAAU,QAAS,QAAS,SAACC,GAC1B,MAAO,IAAIC,GAAcD,MAE5BE,WAAW,iBAAkBJ,EAIlC,IAAAG,GAAA,WAuBI,QAAAA,GAAoBD,GAAAG,KAAAH,MAAAA,EArBbG,KAAAD,WAAa,iBACbC,KAAAC,aAAe,KACfD,KAAAE,kBAAmB,EACnBF,KAAAG,YAAc,+BACdH,KAAAI,OAAQ,EAQPJ,KAAAK,cAAgB,SAACC,GACrB,GAAIC,GAAK,oFACT,OAAOA,GAAGC,KAAKF,IAQfN,KAAKS,SAAW,IAKhBT,KAAKU,KAAO,SAACN,GACTA,EAAMV,QACNU,EAAMO,SAAW,GAMjBP,EAAMQ,SAAW,SAACC,GACd,MAAOhB,GAAMiB,IAAI,oBAajC,MAAAhB,OA/FUJ,EAAAnB,EAAAmB,OAAAnB,EAAAmB,WAAJnB,MAAAA,SCDVC,QAAQC,OAAO,oBAAqBsC,KAAK,iBAAkB,SAASC,GAApEA,EAAAC,IAAA,+BAAA","file":"app.min.js","sourcesContent":["/// <reference path=\"../../../typings/index.d.ts\" />\n// your app setup here\n(function () {\n    'use strict';\n    let app = angular.module('app', [\n        'app.tags',\n        'app.templates'\n    ]);\n    /***\n     * set default configuration for email tagging\n     */\n    app.config(function (tagsInputConfigProvider:any) {\n        tagsInputConfigProvider.setTextAutosizeThreshold(30);\n        tagsInputConfigProvider\n            .setDefaults('tagsInput', {\n                placeholder: 'tag email id',\n                minLength: 5,\n                type: 'email',\n                enableEditingLastTag: true,\n                addOnPaste: true,\n                displayProperty: 'displayName',\n                replaceSpacesWithDashes:false,\n                allowLeftoverText: true,\n                maxLength: 20\n            })\n            .setDefaults('autoComplete', {\n                debounceDelay: 200,\n                loadOnDownArrow: true,\n                loadOnEmpty: true\n            })\n    });\n})();\n","/// <reference path=\"../../../typings/index.d.ts\" />\nnamespace app.tags {\n    'use strict';\n    /**\n     * import all used angular services for interface\n     */\n    import IQService = angular.IQService;\n    import IScope = angular.IScope;\n    /**\n     * Export interface being used for email tagging directive\n     */\n    export interface ITagsCtrl {\n\n    }\n    export interface ITags {\n        displayName:string;\n        mail:string;\n    }\n    export interface ITagsVmScope extends ng.IScope {\n        tags: Array<ITags>;\n        loadTags: Function;\n        tagAdded: Function;\n        tagRemoved: Function;\n        errorMsg: string;\n    }\n    /**\n     * constructor controller class for directive\n     */\n    export class TagsController implements ITagsCtrl {\n        constructor() {\n\n        }\n    }\n    /**\n     * Registering directive and controller\n     */\n    angular\n        .module('app.tags', ['ngTagsInput'])\n        .directive('tags', ['$http', ($http:ng.IHttpService):ng.IDirective => {\n            return new TagsDirective($http);\n        }])\n        .controller(\"TagsController\", TagsController);\n    /**\n     * Email Tag Directive\n     */\n    class TagsDirective implements ng.IDirective {\n        public restrict:string;\n        public controller = 'TagsController';\n        public controllerAs = 'vm';\n        public bindToController = true;\n        public templateUrl = 'app-templates/demo/demo.html';\n        public scope = true;\n\n        public link:ng.IDirectiveLinkFn;\n        /**\n         *\n         * @param email\n         * @returns {boolean}\n         */\n        private validateEmail = (email:string) => {\n            let re = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n            return re.test(email);\n        };\n\n        /**\n         *\n         * @param $http\n         */\n        constructor(private $http:ng.IHttpService) {\n            this.restrict = 'E';\n            /**\n             *\n             * @param scope\n             */\n            this.link = (scope:ITagsVmScope) => {\n                scope.tags = [];\n                scope.errorMsg = '';\n                /**\n                 *\n                 * @param query\n                 * @returns {IHttpPromise<T>}\n                 */\n                scope.loadTags = (query:string):any => {\n                    return $http.get('json/tags.json');\n                };\n               /* scope.tagAdded = (tag:ITags):void => {\n                    let isValidEmail = this.validateEmail(tag.mail);\n                    if (!isValidEmail) {\n                        scope.errorMsg = \"Error: Invalid Email Id\";\n                    }\n                };\n                scope.tagRemoved = ():void => {\n                    scope.errorMsg = '';\n                };*/\n            }\n        }\n    }\n}\n",null],"sourceRoot":"/source/"}